import 'package:flutter/material.dart';
import 'package:solid_software_test_task/src/color/util/random_color.dart';

/// A family of classes that define how to select next [Color] depending on the
/// current one.
abstract class NextColorSelectionStrategy {
  /// Constructs [NextColorSelectionStrategy].
  const NextColorSelectionStrategy();

  /// Returns the next color defined by this [NextColorSelectionStrategy] based
  /// on the [currentColor].
  ///
  /// See the documentation of the implementations for more specific information
  /// on the behavior of this method.
  Color nextColor([Color? currentColor]);
}

/// The [NextColorSelectionStrategy] implementation that returns a random
/// *opaque* color on every [nextColor] call independent from the current
/// color.
///
/// When [nextColor] is called without arguments, returns the [initialColor].
class RandomNextColorStrategy implements NextColorSelectionStrategy {
  /// A color that will be returned if [nextColor] is called without arguments.
  final Color? initialColor;

  /// A color with minimum int value that can be generated by this strategy.
  final Color minColor;

  /// A color with maximum int value that can be generated by this strategy.
  final Color maxColor;

  /// Constructs a new [RandomNextColorStrategy].
  /// The [initialColor] defines what color is returned when [nextColor] is
  /// called without arguments.
  const RandomNextColorStrategy({
    this.initialColor,
    this.minColor = Colors.black,
    this.maxColor = Colors.white,
  });

  @override
  Color nextColor([Color? currentColor]) {
    final initialColor = this.initialColor;
    if (currentColor == null && initialColor != null) {
      return initialColor;
    }

    return randomOpaqueColor(minColor, maxColor);
  }
}
